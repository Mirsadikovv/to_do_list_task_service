// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: event_registrate.proto

package event_registrate_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventRegistrateServiceClient is the client API for EventRegistrateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventRegistrateServiceClient interface {
	Create(ctx context.Context, in *CreateEventRegistrate, opts ...grpc.CallOption) (*GetEventRegistrate, error)
	GetByID(ctx context.Context, in *EventRegistratePrimaryKey, opts ...grpc.CallOption) (*GetEventRegistrate, error)
	Update(ctx context.Context, in *UpdateEventRegistrate, opts ...grpc.CallOption) (*GetEventRegistrate, error)
	Delete(ctx context.Context, in *EventRegistratePrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStudentEvent(ctx context.Context, in *GetListEventRegistrateRequest, opts ...grpc.CallOption) (*GetListEventRegistrateResponse, error)
}

type eventRegistrateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventRegistrateServiceClient(cc grpc.ClientConnInterface) EventRegistrateServiceClient {
	return &eventRegistrateServiceClient{cc}
}

func (c *eventRegistrateServiceClient) Create(ctx context.Context, in *CreateEventRegistrate, opts ...grpc.CallOption) (*GetEventRegistrate, error) {
	out := new(GetEventRegistrate)
	err := c.cc.Invoke(ctx, "/event_registrate_service_go.EventRegistrateService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRegistrateServiceClient) GetByID(ctx context.Context, in *EventRegistratePrimaryKey, opts ...grpc.CallOption) (*GetEventRegistrate, error) {
	out := new(GetEventRegistrate)
	err := c.cc.Invoke(ctx, "/event_registrate_service_go.EventRegistrateService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRegistrateServiceClient) Update(ctx context.Context, in *UpdateEventRegistrate, opts ...grpc.CallOption) (*GetEventRegistrate, error) {
	out := new(GetEventRegistrate)
	err := c.cc.Invoke(ctx, "/event_registrate_service_go.EventRegistrateService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRegistrateServiceClient) Delete(ctx context.Context, in *EventRegistratePrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/event_registrate_service_go.EventRegistrateService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRegistrateServiceClient) GetStudentEvent(ctx context.Context, in *GetListEventRegistrateRequest, opts ...grpc.CallOption) (*GetListEventRegistrateResponse, error) {
	out := new(GetListEventRegistrateResponse)
	err := c.cc.Invoke(ctx, "/event_registrate_service_go.EventRegistrateService/GetStudentEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventRegistrateServiceServer is the server API for EventRegistrateService service.
// All implementations should embed UnimplementedEventRegistrateServiceServer
// for forward compatibility
type EventRegistrateServiceServer interface {
	Create(context.Context, *CreateEventRegistrate) (*GetEventRegistrate, error)
	GetByID(context.Context, *EventRegistratePrimaryKey) (*GetEventRegistrate, error)
	Update(context.Context, *UpdateEventRegistrate) (*GetEventRegistrate, error)
	Delete(context.Context, *EventRegistratePrimaryKey) (*empty.Empty, error)
	GetStudentEvent(context.Context, *GetListEventRegistrateRequest) (*GetListEventRegistrateResponse, error)
}

// UnimplementedEventRegistrateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventRegistrateServiceServer struct {
}

func (UnimplementedEventRegistrateServiceServer) Create(context.Context, *CreateEventRegistrate) (*GetEventRegistrate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEventRegistrateServiceServer) GetByID(context.Context, *EventRegistratePrimaryKey) (*GetEventRegistrate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedEventRegistrateServiceServer) Update(context.Context, *UpdateEventRegistrate) (*GetEventRegistrate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEventRegistrateServiceServer) Delete(context.Context, *EventRegistratePrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEventRegistrateServiceServer) GetStudentEvent(context.Context, *GetListEventRegistrateRequest) (*GetListEventRegistrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentEvent not implemented")
}

// UnsafeEventRegistrateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventRegistrateServiceServer will
// result in compilation errors.
type UnsafeEventRegistrateServiceServer interface {
	mustEmbedUnimplementedEventRegistrateServiceServer()
}

func RegisterEventRegistrateServiceServer(s grpc.ServiceRegistrar, srv EventRegistrateServiceServer) {
	s.RegisterService(&EventRegistrateService_ServiceDesc, srv)
}

func _EventRegistrateService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRegistrate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRegistrateServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_registrate_service_go.EventRegistrateService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRegistrateServiceServer).Create(ctx, req.(*CreateEventRegistrate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRegistrateService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRegistratePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRegistrateServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_registrate_service_go.EventRegistrateService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRegistrateServiceServer).GetByID(ctx, req.(*EventRegistratePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRegistrateService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRegistrate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRegistrateServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_registrate_service_go.EventRegistrateService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRegistrateServiceServer).Update(ctx, req.(*UpdateEventRegistrate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRegistrateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRegistratePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRegistrateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_registrate_service_go.EventRegistrateService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRegistrateServiceServer).Delete(ctx, req.(*EventRegistratePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRegistrateService_GetStudentEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListEventRegistrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRegistrateServiceServer).GetStudentEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_registrate_service_go.EventRegistrateService/GetStudentEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRegistrateServiceServer).GetStudentEvent(ctx, req.(*GetListEventRegistrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventRegistrateService_ServiceDesc is the grpc.ServiceDesc for EventRegistrateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventRegistrateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event_registrate_service_go.EventRegistrateService",
	HandlerType: (*EventRegistrateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EventRegistrateService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _EventRegistrateService_GetByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EventRegistrateService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EventRegistrateService_Delete_Handler,
		},
		{
			MethodName: "GetStudentEvent",
			Handler:    _EventRegistrateService_GetStudentEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_registrate.proto",
}
