// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: perfomance.proto

package perfomance_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PerfomanceServiceClient is the client API for PerfomanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerfomanceServiceClient interface {
	Create(ctx context.Context, in *CreatePerfomance, opts ...grpc.CallOption) (*GetPerfomance, error)
	GetByID(ctx context.Context, in *PerfomancePrimaryKey, opts ...grpc.CallOption) (*GetPerfomance, error)
	GetList(ctx context.Context, in *GetListPerfomanceRequest, opts ...grpc.CallOption) (*GetListPerfomanceResponse, error)
	Update(ctx context.Context, in *UpdatePerfomance, opts ...grpc.CallOption) (*GetPerfomance, error)
	Delete(ctx context.Context, in *PerfomancePrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
}

type perfomanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerfomanceServiceClient(cc grpc.ClientConnInterface) PerfomanceServiceClient {
	return &perfomanceServiceClient{cc}
}

func (c *perfomanceServiceClient) Create(ctx context.Context, in *CreatePerfomance, opts ...grpc.CallOption) (*GetPerfomance, error) {
	out := new(GetPerfomance)
	err := c.cc.Invoke(ctx, "/perfomance_service_go.PerfomanceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfomanceServiceClient) GetByID(ctx context.Context, in *PerfomancePrimaryKey, opts ...grpc.CallOption) (*GetPerfomance, error) {
	out := new(GetPerfomance)
	err := c.cc.Invoke(ctx, "/perfomance_service_go.PerfomanceService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfomanceServiceClient) GetList(ctx context.Context, in *GetListPerfomanceRequest, opts ...grpc.CallOption) (*GetListPerfomanceResponse, error) {
	out := new(GetListPerfomanceResponse)
	err := c.cc.Invoke(ctx, "/perfomance_service_go.PerfomanceService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfomanceServiceClient) Update(ctx context.Context, in *UpdatePerfomance, opts ...grpc.CallOption) (*GetPerfomance, error) {
	out := new(GetPerfomance)
	err := c.cc.Invoke(ctx, "/perfomance_service_go.PerfomanceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfomanceServiceClient) Delete(ctx context.Context, in *PerfomancePrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/perfomance_service_go.PerfomanceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerfomanceServiceServer is the server API for PerfomanceService service.
// All implementations should embed UnimplementedPerfomanceServiceServer
// for forward compatibility
type PerfomanceServiceServer interface {
	Create(context.Context, *CreatePerfomance) (*GetPerfomance, error)
	GetByID(context.Context, *PerfomancePrimaryKey) (*GetPerfomance, error)
	GetList(context.Context, *GetListPerfomanceRequest) (*GetListPerfomanceResponse, error)
	Update(context.Context, *UpdatePerfomance) (*GetPerfomance, error)
	Delete(context.Context, *PerfomancePrimaryKey) (*empty.Empty, error)
}

// UnimplementedPerfomanceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPerfomanceServiceServer struct {
}

func (UnimplementedPerfomanceServiceServer) Create(context.Context, *CreatePerfomance) (*GetPerfomance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPerfomanceServiceServer) GetByID(context.Context, *PerfomancePrimaryKey) (*GetPerfomance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedPerfomanceServiceServer) GetList(context.Context, *GetListPerfomanceRequest) (*GetListPerfomanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPerfomanceServiceServer) Update(context.Context, *UpdatePerfomance) (*GetPerfomance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPerfomanceServiceServer) Delete(context.Context, *PerfomancePrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafePerfomanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerfomanceServiceServer will
// result in compilation errors.
type UnsafePerfomanceServiceServer interface {
	mustEmbedUnimplementedPerfomanceServiceServer()
}

func RegisterPerfomanceServiceServer(s grpc.ServiceRegistrar, srv PerfomanceServiceServer) {
	s.RegisterService(&PerfomanceService_ServiceDesc, srv)
}

func _PerfomanceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePerfomance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfomanceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfomance_service_go.PerfomanceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfomanceServiceServer).Create(ctx, req.(*CreatePerfomance))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfomanceService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerfomancePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfomanceServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfomance_service_go.PerfomanceService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfomanceServiceServer).GetByID(ctx, req.(*PerfomancePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfomanceService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPerfomanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfomanceServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfomance_service_go.PerfomanceService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfomanceServiceServer).GetList(ctx, req.(*GetListPerfomanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfomanceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePerfomance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfomanceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfomance_service_go.PerfomanceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfomanceServiceServer).Update(ctx, req.(*UpdatePerfomance))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfomanceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerfomancePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfomanceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfomance_service_go.PerfomanceService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfomanceServiceServer).Delete(ctx, req.(*PerfomancePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// PerfomanceService_ServiceDesc is the grpc.ServiceDesc for PerfomanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerfomanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "perfomance_service_go.PerfomanceService",
	HandlerType: (*PerfomanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PerfomanceService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _PerfomanceService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PerfomanceService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PerfomanceService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PerfomanceService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "perfomance.proto",
}
